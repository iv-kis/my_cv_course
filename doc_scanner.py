import cv2
from skimage.filters import threshold_local
import numpy as np
import argparse
import imutils

def order_points(pts):
	rect = np.zeros((4,2), dtype = "float32")

	# the top-left point will have the smallest sum, whereas
	# the bottom-right point will have the largest sum
	# top-right point will have the smallest difference,
	# whereas the bottom-left will have the largest difference
	s = pts.sum(axis = 1)
	rect[0] = pts[np.argmin(s)]
	rect[2] = pts[np.argmax(s)]
	diff = np.diff(pts, axis = 1)
	rect[1] = pts[np.argmin(diff)]
	rect[3] = pts[np.argmax(diff)]

	return rect

def four_point_transform(image, pts):
	rect = order_points(pts)
	(tl,tr,br,bl) = rect

	# compute the width of the new image, which will be the
	# maximum distance between bottom-right and bottom-left
	# x-coordiates or the top-right and top-left x-coordinates

	widthA = np.sqrt(((br[0] - bl[0]) ** 2)+((br[1]-bl[1]) ** 2))
	widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
	maxWidth = max(int(widthA),int(widthB))

	heightA = np.sqrt(((br[0] - tr[0]) ** 2)+((br[1]-tr[1]) ** 2))
	heightB = np.sqrt(((bl[0] - tl[0]) ** 2) + ((bl[1] - tl[1]) ** 2))
	maxHeight = max(int(heightA),int(heightB))

	# now that we have the dimensions of the new image, construct
	# the set of destination points to obtain a "birds eye view",
	# (i.e. top-down view) of the image, again specifying points
	# in the top-left, top-right, bottom-right, and bottom-left
	# order
	dst = np.array([
		[0, 0],
		[maxWidth - 1, 0],
		[maxWidth - 1, maxHeight - 1],
		[0, maxHeight - 1]], dtype="float32")

	# compute the perspective transform matrix and then apply it
	M = cv2.getPerspectiveTransform(rect, dst)
	warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))

	return warped

def get_corners_from_contours(contours, corner_amount=4):
	"""
	Finds four corners from a list of points on the goal
	epsilon - the minimum side length of the polygon generated by the corners

	Parameters:
		:param: `contours` - a numpy array of points (opencv contour) of the
							 points to get corners from
		:param: `corner_amount` - the number of corners to find
	"""
	coefficient = .05
	epsilon = coefficient * cv2.arcLength(contours, True)

	while True:
		# print(contours)
		print("epsilon:", epsilon)

		poly_approx = cv2.approxPolyDP(contours, epsilon, True)
		
		#Выпуклая оболочка, описывающая точки poly_approx
		hull = cv2.convexHull(poly_approx)
		if len(hull) == corner_amount:
			return hull
		else:
			if len(hull) > corner_amount:
				coefficient += .01
			else:
				coefficient -= .01
		epsilon = coefficient * cv2.arcLength(contours, True)
		if epsilon < 0: return hull

# construct the argument parser and parse the arguments
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required = True,
	help = "Path to the image to be scanned")
args = vars(ap.parse_args())

image = cv2.imread(args["image"])
ratio = image.shape[0] / 500.0
orig = image.copy()
image = imutils.resize(image, height = 500)

gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)
gray = cv2.multiply(gray,1.2)
gray = cv2.GaussianBlur(gray, (5, 5), 0)
thres = cv2.threshold(gray,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)[1]
edged = cv2.Canny(thres, 75, 200)

# show the original image and the edge detected image
print("STEP 1: Edge Detection")
cv2.imshow("Gray", gray)
cv2.imshow("Image", image)
cv2.imshow("Edged", edged)
cv2.imshow("thres", thres)
cv2.waitKey(0)
cv2.destroyAllWindows()

# find the contours in the edged image, keeping only the
# largest ones, and initialize the screen contour
cnts = cv2.findContours(thres.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cnts = imutils.grab_contours(cnts)
cnt = sorted(cnts, key = cv2.contourArea, reverse = True)[0]

approx = get_corners_from_contours(cnt)
cv2.drawContours(image, cnt, -1, (0, 255, 0), 2)
points = [tuple(i[0]) for i in approx]

# show the contour (outline) of the piece of paper
print("STEP 2: Find contours of paper")
for i in points:
	cv2.circle(image,i,5,(0,0,255),-1)
cv2.imshow("Outline", image)
cv2.waitKey(0)
cv2.destroyAllWindows()

# apply the four point transform to obtain a top-down
# view of the original image
warped = four_point_transform(orig, np.array(points).reshape(4,2)*ratio)

# convert the warped image to grayscale, then threshold it
# to give it that 'black and white' paper effect
#warped = cv2.cvtColor(warped, cv2.COLOR_BGR2GRAY)
#T = threshold_local(warped, 11, offset = 10, method = "gaussian")
#warped = (warped > T).astype("uint8") * 255

# show the original and scanned images
print("STEP 3: Apply perspective transform")
cv2.imshow("Original", imutils.resize(orig, height = 650))
cv2.imshow("Outline", imutils.resize(image,height = 650))
cv2.imshow("Scanned", imutils.resize(warped, height = 650))
cv2.waitKey(0)